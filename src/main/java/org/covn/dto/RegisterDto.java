package org.covn.dto;

/**
 * Registration fields for all users (patients and health professionals)
 */


import java.util.Date;

public class RegisterDto {
	private String userId; // return to user after successful user creation 

	// ls name fields are in Latin English-26 character script
	// in Release1, only latin script names are supported
	private String lsTitle; // optional, eg. Mr, Ms, Miss, Mrs, Dr, Prof or regional variations. CHECK CONSTRAINT
	private String lsFirstName; // required
	private String lsMiddleName; // optional
	private String lsLastName; // required
	private String lsSuffix; // optional, e.g. I, II, III, Sr, Jr, etc. Not for academic degrees. 
	private String lsDegrees; // optional. Usually Masters and above degrees. But sometimes, undergraduate degrees are entered for some health professionals 
	private String lsMaidenName; // optional
	private String lsDisplayName; // optional. if blank, use (firstName + " " + lastName)
	private String lsAliasName1; // optional. If the user has an alias, fill it here
	private String lsAliasName2; // optional. If the user has another alias, fill it here

	// OPTIONAL: ns name fields are in native character script including extended Latin characters (e.g. European languages with accent marks)
	// Native script names will be supported in Release2
	private String nsTitle; 
	private String nsFirstName; 
	private String nsMiddleName; 
	private String nsLastName; 
	private String nsSuffix;  
	private String nsDegrees;
	private String nsMaidenName; 
	private String nsDisplayName;
	private String nsAliasName1; 
	private String nsAliasName2; 
	
	private String standardName; // autogenerated: standardized full name of the user in the 
	// machine readable passport official travel document line 3 format (even if the user 
	// does not have a passport) - Uppercase English letters and spaces only. Max length 
	// is 30 characters. Surname, followed by two spaces, followed by given names. If there 
	// are multiple given (first and middle) names or multiple surnames, they are separated 
	// by single spaces. If longer than 30 characters, then trim given names to fit.
	
	// either dob or ageInYrs must be present. (UI design note: dob is preferred)
	private Date dob; // date of birth
	private int ageInYrs; // approximate age in years, when date of birth is not known
	
	private String adminGender; // gender, required. also known as 'administrative gender'. What gender does the user identify 
		// as in a socio-cultureal context. CHECK CONSTRAINT
	private String biologicalSex; // Optional, the biological sex of an individual. May be different from their gender

	// id document fields go into the external_identifier table
	private String idDocType; // Identification document type, e.g. passport, driving license, etc. CHECK CONSTRAINT
	private String idDocNum; // Identification document number
	private String idDocIssuingAuthority; // e.g. Country for pasport, state for driving license. 
	// note: we are not capturing issue and expiration date of identification document for release1 though db fields are present
	
	// address fields go into the address table
	private String addressType; // Required - home, office. CHECK CONSTRAINT
	private String addressInCareOf; // optional
	private String addressCompanyName; // optional
	private String addressLine1; // required
	private String addressLine2; // optional 
	private String addressLine3; // optional
	private String addressCity; // required
	private String addressDistrict; // optional
	private String addressState; // required
	private String addressPostCode; // required
	private String addressCountry; // required
	
	// phone number fields go into the phone_number table
	private String phoneType; // required, CHECK CONSTRAINT
	private String phoneNumFormatted; // validate input format. Allowed characters: {"0-9", " ", "-", "+", "x", "(", ")", ","}
	private String phoneNumber;
	private String phoneNumberExtension; // typically used for office phones
	private boolean isPhonePrimaryUser; // is this user the primary user of the phone (false in some cases, e.g. when a child is added to a parent's phone number as a secondary user)
	private String phonePrimaryUserId; // optional, used for secondary users only
	private boolean phoneHasInternet; // optional
	private boolean phoneHasSMS; // optional
	private boolean phoneHasWhatsApp; // optional
	private boolean phoneHasTelegram; // optional
	private boolean phoneHasLocationService; // optional
	
	// email fields go into the email_address table
	private String emailType; // optional for patients, required for health professionals, CHECK CONSTRAINT
	private String emailAddress; // validate input format. 
	private boolean isEmailPrimaryUser; // is this user the primary user of the email (false in some cases, e.g. when a child is added to a parent's or for office email address)
	private String emailPrimaryUserId; // optional, used for secondary users only
	
	// photo fields go into the user_photo table. the photo image file is saved on the file system and it's path is saved in the table
	// If photoPath is provided, then photoType must be provided.
	private String photoType; // CHECK CONSTRAINT
	private String photoPath;
	
	// @TO-DO: Generate getters and setters

	public void setPhotoPath (String photoPath) {
		this.photoPath = photoPath;
	}
	
	public String getPhotoPath() {
		return photoPath;
	}
	
	
}
